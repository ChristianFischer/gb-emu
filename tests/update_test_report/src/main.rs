/*
 * Copyright (C) 2022-2023 by Christian Fischer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

use std::cell::RefCell;
use std::path::PathBuf;
use std::rc::Rc;
use tests_shared::config::{SOURCE_URL, TESTRUNNER_PATH, TESTRUNNER_SUBDIR_ROM_FILES};
use tests_shared::download::download_test_roms;
use tests_shared::io_utils::{update_file, Workspace};
use tests_shared::test_suites::ALL_TEST_SUITES;
use crate::report_generator::TestReportGenerator;

mod report_generator;


const TEST_ROM_SUMMARY_HEADER : &str = /* language=markdown */ r#"
## Test ROM Results

The emulator is tested against several well known test suites to check if the emulator's
functionality is as close as possible to the original hardware. Since even the original
GameBoy devices had some bugs or unexpected behaviour, it requires a lot of effort and
continuous testing.

This document is generated by the `update-test-report` tool which runs each test rom on the
emulator for each valid device model.
To update this file, call `run --package update-test-report --release --bin update-test-report`.


|                                                    |   ✔️   |   ❌   |   ⚠️   |   ☠️   |
|----------------------------------------------------|-------:|-------:|-------:|-------:|
"#;

const TEST_ROM_SUMMARY_FOOTER : &str = /* language=markdown */ r#"
## Symbols

|    | Meaning                                      |
|:--:|:---------------------------------------------|
| ✔️ | Test passed                                  |
| ❌  | Test ran, but did not receive a success code |
| ⚠️ | The emulator failed to run for some reason   |
| ☠️ | The emulator panicked while running the test |
"#;



pub fn main() {
    let workspace = Workspace::for_root_path(PathBuf::from(
        format!("{}/{}", TESTRUNNER_PATH, TESTRUNNER_SUBDIR_ROM_FILES)
    ));

    // download test ROM archive, if the target directory does not exist yet
    if !workspace.get_root_path().is_dir() {
        download_test_roms(workspace.get_root_path(), &SOURCE_URL);
    }

    // string to store the content of test_report.md, which contains the test summary
    let mut test_summary_content = String::from(TEST_ROM_SUMMARY_HEADER);

    for test_suite in ALL_TEST_SUITES {
        let generator = Rc::new(RefCell::new(TestReportGenerator::new(&workspace)));

        // visit all test ROMS and generate test cases for each of them
        test_suite.start(&workspace, generator.clone());

        // this will actually run the tests and generate the test report output
        let stats = generator.borrow_mut().export_to_file(
            test_suite.title,
            &PathBuf::from(&format!("doc/test_report_{}.md", test_suite.name))
        );

        // add an entry into the summary file
        {
            let to_percent = 100.0 / (stats.total as f32);

            test_summary_content.push_str(&format!(
                "| {:50} | {:5.1}% | {:5.1}% | {:5.1}% | {:5.1}% |\n",
                format!("[{}](test_report_{}.md)", test_suite.title, test_suite.name),
                (stats.success  as f32) * to_percent,
                (stats.failed   as f32) * to_percent,
                (stats.errors   as f32) * to_percent,
                (stats.panicked as f32) * to_percent
            ));
        }
    }

    // update summary file
    {
        test_summary_content.push_str(TEST_ROM_SUMMARY_FOOTER);

        update_file(&PathBuf::from("doc/test_report.md"), &test_summary_content);
    }
}
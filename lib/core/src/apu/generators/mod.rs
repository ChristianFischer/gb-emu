/*
 * Copyright (C) 2022-2023 by Christian Fischer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

use crate::apu::registers::ApuChannelRegisters;
use crate::gameboy::Clock;

pub mod noise;
pub mod pulse;
pub mod wave;

mod envelope;
mod freq_sweep;
mod length_timer;
mod wave_duty;


/// Trait for any sound generator object.
pub trait SoundGenerator {
    /// Called when the channel was triggered by setting bit 7 of it's NRx4 register.
    /// This should start the channel to generate sound.
    fn on_trigger_event(&mut self, registers: &ApuChannelRegisters);

    /// Called by the frame sequencer to update the sound length timer.
    fn tick_sound_length(&mut self, registers: &ApuChannelRegisters);

    /// Called by the frame sequencer to update the frequency sweep of channel 1.
    fn tick_freq_sweep(&mut self, registers: &ApuChannelRegisters);

    /// Called by the frame sequencer to update the envelope function.
    fn tick_envelope_sweep(&mut self, registers: &ApuChannelRegisters);

    /// Called to update the internal values of the sound generator.
    /// This call wont happen periodically but when necessary on register changes
    /// or when a sound sample needs to be created.
    fn update(&mut self, registers: &ApuChannelRegisters, cycles: Clock);

    /// Checks whether to enable or disable the channels DAC.
    fn is_dac_enabled(&self) -> bool;

    /// Get the current sample generated by this generator object.
    /// The generated sample is expected to be in the range of 0x00 to 0x0f.
    fn get_sample(&self) -> u8;
}

/*
 * Copyright (C) 2022-2023 by Christian Fischer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

use crate::cpu::CPU_CLOCK_SPEED;
use crate::gameboy::Clock;


/// A buffer object receiving the audio data generated by the APU.
pub struct OutputBuffer {
    sample_rate: u32,
    samples: Vec<i16>,
}


impl OutputBuffer {
    pub fn new() -> Self {
        Self {
            sample_rate: 48_000,
            samples: vec![],
        }
    }


    /// Get the sample rate configured for this output buffer.
    pub fn get_sample_rate(&self) -> u32 {
        self.sample_rate
    }


    /// Get the number of CPU-Cycles to pass for each sample to be generated.
    pub fn get_cycles_per_sample(&self) -> Clock {
        CPU_CLOCK_SPEED / (self.sample_rate as Clock)
    }


    /// Push a new sample into the buffer.
    pub fn push(&mut self, value_left: i16, value_right: i16) {
        self.samples.push(value_left);
        self.samples.push(value_right);
    }


    /// Takes all existing samples from the buffer.
    /// This will return a vector containing all currently stored samples and removes them
    /// from the internal buffer.
    pub fn take_samples(&mut self) -> Vec<i16> {
        let samples = self.samples.clone();
        self.samples = vec![];

        samples
    }
}